// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"
)

const createInstallation = `-- name: CreateInstallation :one
INSERT INTO installations (
    name, path, type
) VALUES (
    ?, ?, ?
)
RETURNING name, path, type
`

type CreateInstallationParams struct {
	Name string
	Path string
	Type string
}

func (q *Queries) CreateInstallation(ctx context.Context, arg CreateInstallationParams) (Installation, error) {
	row := q.db.QueryRowContext(ctx, createInstallation, arg.Name, arg.Path, arg.Type)
	var i Installation
	err := row.Scan(&i.Name, &i.Path, &i.Type)
	return i, err
}

const deleteInstallation = `-- name: DeleteInstallation :exec
DELETE FROM installations
where name = ?
`

func (q *Queries) DeleteInstallation(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteInstallation, name)
	return err
}

const deletePath = `-- name: DeletePath :exec
DELETE FROM installations
where path = ?
`

func (q *Queries) DeletePath(ctx context.Context, path string) error {
	_, err := q.db.ExecContext(ctx, deletePath, path)
	return err
}

const getInstallation = `-- name: GetInstallation :one
SELECT name, path, type FROM installations
WHERE name = ? LIMIT 1
`

func (q *Queries) GetInstallation(ctx context.Context, name string) (Installation, error) {
	row := q.db.QueryRowContext(ctx, getInstallation, name)
	var i Installation
	err := row.Scan(&i.Name, &i.Path, &i.Type)
	return i, err
}

const getPath = `-- name: GetPath :one
SELECT path FROM  installations
WHERE name = ? LIMIT 1
`

func (q *Queries) GetPath(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRowContext(ctx, getPath, name)
	var path string
	err := row.Scan(&path)
	return path, err
}

const getType = `-- name: GetType :one
SELECT type FROM installations
where name = ? LIMIT 1
`

func (q *Queries) GetType(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRowContext(ctx, getType, name)
	var type_ string
	err := row.Scan(&type_)
	return type_, err
}

const listInstallations = `-- name: ListInstallations :many
SELECT name, path, type FROM installations
ORDER BY name
`

func (q *Queries) ListInstallations(ctx context.Context) ([]Installation, error) {
	rows, err := q.db.QueryContext(ctx, listInstallations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Installation
	for rows.Next() {
		var i Installation
		if err := rows.Scan(&i.Name, &i.Path, &i.Type); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaths = `-- name: ListPaths :many
SELECT path FROM installations
`

func (q *Queries) ListPaths(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listPaths)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var path string
		if err := rows.Scan(&path); err != nil {
			return nil, err
		}
		items = append(items, path)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
